const express = require('express')
const router = express.Router()
const { catchErrors } = require('../handlers/errorHandlers')
const homeController = require('../controllers/homeController')
const productController = require('../controllers/productController')
const catalogController = require('../controllers/catalogController')
const storeController = require('../controllers/storeController')
const contactsController = require('../controllers/contactsController')

const apiController = require('../controllers/apiController')
const userController = require('../controllers/userController')
const authController = require('../controllers/authController')
const reviewController = require('../controllers/reviewController')
const orderController = require('../controllers/orderController')
const employeeController = require('../controllers/employeeController')

router.get('/', catchErrors(homeController.getHome))
router.get('/employee', catchErrors(employeeController.getProfile))
router.get('/employee/achivements/search', catchErrors(employeeController.achivementsSearch))
router.post('/employee/:id/achivements/add', catchErrors(employeeController.employeeAddAchivement))
router.get('/admin/employeesManager', userController.isAdmin, employeeController.getEmployeesManager)
router.get('/admin/employeesManager/achivementsEditor', userController.isAdmin, catchErrors(employeeController.getAchivements))
router.get('/admin/employeesManager/employeesEditor/:id', userController.isAdmin, catchErrors(employeeController.getEditEmployee))
router.get('/admin/employeesManager/employeesList', userController.isAdmin, catchErrors(employeeController.getEmployeesList))
router.get('/admin/employeesManager/:page', userController.isAdmin, employeeController.getEmployeesManager)
router.post('/employee/edit', catchErrors(employeeController.editEmployee))
router.post('/achivement/edit', catchErrors(employeeController.editAchivement))

router.post('/register', userController.validateRegister, userController.register, authController.afterLogin)
router.post('/login', authController.login, authController.afterLogin)
router.get('/logout', authController.isLoggedIn, authController.logout)
router.get('/profile/orders', authController.isLoggedIn, catchErrors(orderController.getOrders))
router.get('/profile/purse', authController.isLoggedIn, catchErrors(userController.getPurse))
router.get('/profile/bonus', authController.isLoggedIn, catchErrors(userController.getBonus))
router.get('/profile/:page', authController.isLoggedIn, userController.getProfile)
router.post('/profile/update', catchErrors(userController.updateProfile))
router.post('/user/passport/change', catchErrors(userController.updatePassportData))
router.post('/auth/password/change', authController.confirmedPassword, catchErrors(authController.changePassword))

router.get('/product/:id', catchErrors(productController.getProduct))
router.get('/catalog', catchErrors(catalogController.getCatalog))
router.get('/catalog/:type/page/:page', catchErrors(catalogController.getCatalogPages))
router.get('/catalog/:type/:model/page/:page', catchErrors(catalogController.getCatalogPages))
router.get('/order/steps/1', authController.isLoggedIn, catchErrors(productController.getShoppingCart))
router.get('/order/steps/:step', authController.isLoggedIn, userController.getStep)
router.get('/contacts', contactsController.getContacts)
router.get('/contacts/:id', catchErrors(contactsController.getStoreContacts))
router.get('/store/:id', catchErrors(storeController.getStore))
router.get('/products/hearted', catchErrors(productController.heartedProducts))
router.get('/reviews/more', catchErrors(reviewController.moreReviews))

router.get('/admin/product/edit', userController.isAdmin, productController.getProductEditor)
router.get('/admin/product/edit/:id', userController.isAdmin, catchErrors(productController.getUpdateProductEditor))
router.post('/model/add', catchErrors(productController.addModel))
router.post('/product/add', catchErrors(productController.addProduct))
router.post('/product/add/:id', catchErrors(productController.updateProduct))
router.delete('/product/:id', catchErrors(productController.deleteProduct))
router.delete('/model/:name', catchErrors(productController.deleteModel))

router.post('/reviews/:id', authController.isLoggedIn, catchErrors(reviewController.addReview))
router.post('/order', catchErrors(orderController.order))

router.post('/api/fileUpload', apiController.upload, catchErrors(apiController.resize), apiController.fileUpload)
router.get('/api/search', catchErrors(apiController.searchProducts))
router.post('/api/products/:id/like', authController.isLoggedIn, catchErrors(apiController.likeProduct))
router.post('/api/product/:id/addToCart', authController.isLoggedIn, catchErrors(apiController.addToCart))
router.delete('/api/product/:id/delete', catchErrors(apiController.removeFromCart))
router.get('/api/stores/near', catchErrors(storeController.mapStores))
router.post('/api/deposit', catchErrors(apiController.addMoney))

router.get('/admin/store/edit', userController.isAdmin, storeController.getStoreEditor)
router.get('/admin/store/edit/:id', userController.isAdmin, catchErrors(storeController.getUpdateStoreEditor))
router.post('/store/add', catchErrors(storeController.addStore))
router.post('/store/add/:id', catchErrors(storeController.updateStore))
router.delete('/store/:id', catchErrors(storeController.deleteStore))

router.post('/account/forgot', catchErrors(authController.forgot))
router.get('/account/reset/:token', catchErrors(authController.reset))
router.post('/account/reset/:token', authController.confirmedPassword, catchErrors(authController.update))

module.exports = router
